// Mocks generated by Mockito 5.0.17 from annotations
// in skein_rest_client/test/skein_rest_client_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:async/async.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:skein_rest_client/skein_rest_client.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUri_0 extends _i1.Fake implements Uri {}

class _FakeRestClient_1 extends _i1.Fake implements _i2.RestClient {}

class _FakeCancelableOperation_2<T> extends _i1.Fake
    implements _i3.CancelableOperation<T> {}

/// A class which mocks [RestClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestClient extends _i1.Mock implements _i2.RestClient {
  MockRestClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri_0())
          as Uri);
  @override
  void init(Uri? uri) => super.noSuchMethod(Invocation.method(#init, [uri]),
      returnValueForMissingStub: null);
  @override
  _i2.RestClient decode({_i2.DecoderFunction<dynamic>? withDecoder}) => (super
      .noSuchMethod(Invocation.method(#decode, [], {#withDecoder: withDecoder}),
          returnValue: _FakeRestClient_1()) as _i2.RestClient);
  @override
  _i2.RestClient encode({_i2.EncoderFunction<dynamic>? withEncoder}) => (super
      .noSuchMethod(Invocation.method(#encode, [], {#withEncoder: withEncoder}),
          returnValue: _FakeRestClient_1()) as _i2.RestClient);
  @override
  _i2.RestClient addHeader({String? name, String? value}) =>
      (super.noSuchMethod(
          Invocation.method(#addHeader, [], {#name: name, #value: value}),
          returnValue: _FakeRestClient_1()) as _i2.RestClient);
  @override
  _i2.RestClient authorization(_i2.AuthorizationBuilder? authorization) =>
      (super.noSuchMethod(Invocation.method(#authorization, [authorization]),
          returnValue: _FakeRestClient_1()) as _i2.RestClient);
  @override
  _i2.RestClient onError(_i2.ExceptionHandler<dynamic>? exceptionHandler) =>
      (super.noSuchMethod(Invocation.method(#onError, [exceptionHandler]),
          returnValue: _FakeRestClient_1()) as _i2.RestClient);
  @override
  _i2.RestClient stub<T>(_i4.FutureOr<T>? stub) =>
      (super.noSuchMethod(Invocation.method(#stub, [stub]),
          returnValue: _FakeRestClient_1()) as _i2.RestClient);
  @override
  _i3.CancelableOperation<T> post<T>([dynamic data]) =>
      (super.noSuchMethod(Invocation.method(#post, [data]),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> patch<T>([dynamic data]) =>
      (super.noSuchMethod(Invocation.method(#patch, [data]),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> get<T>() =>
      (super.noSuchMethod(Invocation.method(#get, []),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> delete<T>([dynamic data]) =>
      (super.noSuchMethod(Invocation.method(#delete, [data]),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> doPost<T>([dynamic data]) =>
      (super.noSuchMethod(Invocation.method(#doPost, [data]),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> doPatch<T>([dynamic data]) =>
      (super.noSuchMethod(Invocation.method(#doPatch, [data]),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> doGet<T>() =>
      (super.noSuchMethod(Invocation.method(#doGet, []),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> doDelete<T>([dynamic data]) =>
      (super.noSuchMethod(Invocation.method(#doDelete, [data]),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
  @override
  _i3.CancelableOperation<T> doStub<T>(_i4.FutureOr<dynamic>? stub,
          {String? method}) =>
      (super.noSuchMethod(Invocation.method(#doStub, [stub], {#method: method}),
              returnValue: _FakeCancelableOperation_2<T>())
          as _i3.CancelableOperation<T>);
}

/// A class which mocks [CancelableOperation].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelableOperation<T> extends _i1.Mock
    implements _i3.CancelableOperation<T> {
  MockCancelableOperation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<T> get value => (super.noSuchMethod(Invocation.getter(#value),
      returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  bool get isCanceled =>
      (super.noSuchMethod(Invocation.getter(#isCanceled), returnValue: false)
          as bool);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  _i4.Stream<T> asStream() =>
      (super.noSuchMethod(Invocation.method(#asStream, []),
          returnValue: Stream<T>.empty()) as _i4.Stream<T>);
  @override
  _i4.Future<T?> valueOrCancellation([T? cancellationValue]) =>
      (super.noSuchMethod(
          Invocation.method(#valueOrCancellation, [cancellationValue]),
          returnValue: Future<T?>.value()) as _i4.Future<T?>);
  @override
  _i3.CancelableOperation<R> then<R>(_i4.FutureOr<R>? Function(T)? onValue,
          {_i4.FutureOr<R>? Function(Object, StackTrace)? onError,
          _i4.FutureOr<R>? Function()? onCancel,
          bool? propagateCancel = true}) =>
      (super.noSuchMethod(
              Invocation.method(#then, [
                onValue
              ], {
                #onError: onError,
                #onCancel: onCancel,
                #propagateCancel: propagateCancel
              }),
              returnValue: _FakeCancelableOperation_2<R>())
          as _i3.CancelableOperation<R>);
  @override
  _i4.Future<dynamic> cancel() =>
      (super.noSuchMethod(Invocation.method(#cancel, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
